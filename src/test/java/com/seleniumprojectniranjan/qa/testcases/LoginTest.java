package com.seleniumprojectniranjan.qa.testcases;

import org.openqa.selenium.WebDriver;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

import com.seleniumprojectniranjan.qa.base.basetest;

import com.seleniumprojectniranjan.qa.pages.homepage;
import com.seleniumprojectniranjan.qa.pages.loginpage;
import com.seleniumprojectniranjan.qa.utils.utilities;

public class LoginTest extends basetest {

	SoftAssert softAssert = new SoftAssert();
	boolean isTestPassed = false;
	loginpage loginpageobj;
	String expected = "true";

	public LoginTest() {
		super();
	}
	
	public WebDriver driver;

	@BeforeMethod
	public void SetUp() {
		driver = InitializeBrowserAndApplicationUrl(prop.getProperty("browser"));
		driver.get(prop.getProperty("url"));

		homepage homepageobj = new homepage(driver);
		homepageobj.ClickSignIn();
		waitForPageLoad(4000);
		loginpageobj = new loginpage(driver);
	}

	@AfterTest
	public void TearDown() {
		driver.quit();
	}

	@DataProvider
	public Object[][] supplyTestData() {
		Object[][] data = utilities.getTestDataFromExcel("login");
		return data;
	}

	/********************
	 * Test cases to Check Login Functionality
	 ************************************/

	@Test(dataProvider = "supplyTestData")
	public void LoginWithValidCredentials(String username, String password) {
		try {
			loginpageobj.LoginToPortal(username, password);
			waitForPageLoad(4000);
			String expected = dataProp.getProperty("loggedinpagetitle");
			String actual = driver.getTitle();
			if (expected.equalsIgnoreCase(actual)) {
				isTestPassed = true;
			} else {
				isTestPassed = false;
			}
		} catch (Exception testException) {
			isTestPassed = false;
			System.out.println("Exception due to " + testException);
		}
		softAssert.assertTrue(isTestPassed);
		softAssert.assertAll();
	}

	@Test()
	public void LoginWithInValidUserName() {
		try {
			loginpageobj.EnterUserName(utilities.getAutoGeneratedEmailId("invalidemail"));
			loginpageobj.ClickNextButton();
			waitForPageLoad(4000);
			String actual = String.valueOf(loginpageobj.IsUserNameFieldErrorMessageDisplayed());
			if (expected.equalsIgnoreCase(actual)) {
				isTestPassed = true;
			} else {
				isTestPassed = false;
			}
		} catch (Exception testException) {

			isTestPassed = false;
			System.out.println("Exception due to " + testException);
		}
		softAssert.assertTrue(isTestPassed);
		softAssert.assertAll();
	}

	@Test()
	public void LoginWithInValidPassword() {
		try {
			loginpageobj.EnterUserName(prop.getProperty("username"));
			loginpageobj.ClickNextButton();
			waitForPageLoad(4000);
			loginpageobj.EnterUserPassWord("invalidpassword" + utilities.getStringNumberForCurrentTime());
			loginpageobj.ClickSignInButton();
			String actual = String.valueOf(loginpageobj.IsPasswordFieldErrorMessageDisplayed());
			if (expected.equalsIgnoreCase(actual)) {
				isTestPassed = true;
			} else {
				isTestPassed = false;
			}
		} catch (Exception testException) {

			isTestPassed = false;
			System.out.println("Exception due to " + testException);
		}
		softAssert.assertTrue(isTestPassed);
		softAssert.assertAll();
	}

}
